{#
 # -------------------------------------------------------------------------
 # Carbon plugin for GLPI
 #
 # @copyright Copyright (C) 2024-2025 Teclib' and contributors.
 # @license   https://www.gnu.org/licenses/gpl-3.0.txt GPLv3+
 # @license   MIT https://opensource.org/licenses/mit-license.php
 # @link      https://github.com/pluginsGLPI/carbon
 #
 # -------------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of Carbon plugin for GLPI.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 # -------------------------------------------------------------------------
 #}

{% import 'components/form/fields_macros.html.twig' as fields %}

{% macro timeField(name, value, label = '', options = {}) %}
   {% import 'components/form/fields_macros.html.twig' as fields %}
   {% set options = {
      'rand': random(),
      'disabled': false
      }|merge(options)
   %}

   {% if options.disabled %}
      {% set options = options|merge({specific_tags: {'disabled': 'disabled'}}) %}
   {% endif %}
   {% if options.fields_template.isMandatoryField(name)|default(false) %}
      {% set options = {'specific_tags': {'required': true}}|merge(options) %}
   {% endif %}

   {% set field %}
      {% do call('GlpiPlugin\\Carbon\\Html::showTimeField', [name, {
         'value': value,
         'rand': options.rand,
         'width': '100%'
      }|merge(options)]) %}
   {% endset %}
   {{ fields.field(name, field, label, options) }}
{% endmacro %}

{% macro dropdownBoaviztaZone(name, value, label = '', options = {}) %}
   {% import 'components/form/fields_macros.html.twig' as fields %}

   {% if options.multiple ?? false %}
      {# Needed for empty value as the input wont be sent in this case... we need something to know the input was displayed AND empty #}
      {% set defined_input_name = "_#{name}_defined" %}
      <input type="hidden" name="{{ defined_input_name }}" value="1"></input>

      {# Multiple values will be set, input need to be an array #}
      {% set name = "#{name}[]" %}
   {% endif %}
   {% set options = {
      'rand':     random(),
      'disabled': false}|merge(options)
   %}
   {% if options.fields_template.isMandatoryField(name)|default(false) %}
      {% set options = {'specific_tags': {'required': true}}|merge(options) %}
   {% endif %}

   {% if options.disabled %}
      {% set options = options|merge({specific_tags: {'disabled': 'disabled'}}) %}
   {% endif %}

   {% set field %}
      {% do call('GlpiPlugin\\Carbon\\DataSource\\Boaviztapi::dropdownBoaviztaZone', [name, {
         'value': value,
         'rand': options.rand,
         'width': '100%',
      }|merge(options)]) %}
   {% endset %}
   {% if field|trim is not empty %}
      {{ fields.field(name, field, label, options|merge({'id': 'dropdown_' ~ name ~ '_' ~ options.rand})) }}
   {% endif %}
{% endmacro %}

{% macro dropdownComputerType(name, value, label = '', options = {}) %}
   {% import 'components/form/fields_macros.html.twig' as fields %}

   {% if options.multiple ?? false %}
      {# Needed for empty value as the input wont be sent in this case... we need something to know the input was displayed AND empty #}
      {% set defined_input_name = "_#{name}_defined" %}
      <input type="hidden" name="{{ defined_input_name }}" value="1"></input>

      {# Multiple values will be set, input need to be an array #}
      {% set name = "#{name}[]" %}
   {% endif %}
   {% set options = {
      'rand': random(),
      'disabled': false,
   }|merge(options) %}
   {% if options.fields_template.isMandatoryField(name)|default(false) %}
      {% set options = {'specific_tags': {'required': true}}|merge(options) %}
   {% endif %}

   {% if options.disabled %}
      {% set options = options|merge({specific_tags: {'disabled': 'disabled'}}) %}
   {% endif %}

   {% set field %}
      {% do call('GlpiPlugin\\Carbon\\ComputerType::dropdownType', [name, {
         'value': value,
         'rand': options.rand,
         'width': '100%',
      }|merge(options)]) %}
   {% endset %}
   {% if field|trim is not empty %}
      {{ fields.field(name, field, label, options|merge({'id': 'dropdown_' ~ name ~ '_' ~ options.rand})) }}
   {% endif %}
{% endmacro %}
